From: Bastian Blank <waldi@debian.org>
Subject: Add debian version information to kernel version string
Date: Sun, 20 May 2007 11:46:51 +0200

Include the package version in /proc/version and the initial log
banner.

Determine the target distribution ($DISTRIBUTION) with lsb_release,
defaulting to Debian.

For distribution binary packages we assume
$DISTRIBUTION_OFFICIAL_BUILD is set.  Add $DISTRIBUTION and
$DISTRIBUTION_VERSION after the kernel version (UTS_RELEASE), and
replace the account name used to build the package with
$DISTRIBUTION_UPLOADER.

[bwh: Changed $DISTRIBUTION_UPLOADER to $DISTRIBUTION_MAINTAINER.]

For custom packages built from a linux-source package, read the
package version from version.$DISTRIBUTION and add that after
the kernel version string.

--- a/init/version.c
+++ b/init/version.c
@@ -11,6 +11,7 @@
 #include <linux/uts.h>
 #include <linux/utsname.h>
 #include <generated/utsrelease.h>
+#include <generated/package.h>
 #include <linux/version.h>
 
 #ifndef CONFIG_KALLSYMS
@@ -37,12 +38,12 @@ struct uts_namespace init_uts_ns = {
 };
 EXPORT_SYMBOL_GPL(init_uts_ns);
 
-/* FIXED STRINGS! Don't touch! */
 const char linux_banner[] =
-	"Linux version " UTS_RELEASE " (" LINUX_COMPILE_BY "@"
-	LINUX_COMPILE_HOST ") (" LINUX_COMPILER ") " UTS_VERSION "\n";
+	"Linux version " UTS_RELEASE LINUX_PACKAGE_ID
+	LINUX_COMPILE_ID " (" LINUX_COMPILER ") " UTS_VERSION "\n";
 
 const char linux_proc_banner[] =
 	"%s version %s"
-	" (" LINUX_COMPILE_BY "@" LINUX_COMPILE_HOST ")"
+	LINUX_PACKAGE_ID
+	LINUX_COMPILE_ID
 	" (" LINUX_COMPILER ") %s\n";
--- a/scripts/mkcompile_h
+++ b/scripts/mkcompile_h
@@ -73,8 +73,18 @@ UTS_TRUNCATE="cut -b -$UTS_LEN"
 
   echo \#define UTS_VERSION \"`echo $UTS_VERSION | $UTS_TRUNCATE`\"
 
-  echo \#define LINUX_COMPILE_BY \"`echo $LINUX_COMPILE_BY | $UTS_TRUNCATE`\"
-  echo \#define LINUX_COMPILE_HOST \"`echo $LINUX_COMPILE_HOST | $UTS_TRUNCATE`\"
+  DISTRIBUTION=$(lsb_release -is 2>/dev/null)
+  DISTRIBUTION=${DISTRIBUTION:-Debian}
+
+  if [ "$DISTRIBUTION_OFFICIAL_BUILD" ]; then
+    echo \#define LINUX_COMPILE_BY \"unknown\"
+    echo \#define LINUX_COMPILE_HOST \"$DISTRIBUTION\"
+    echo \#define LINUX_COMPILE_ID \" \($DISTRIBUTION_MAINTAINER\)\"
+  else
+    echo \#define LINUX_COMPILE_BY \"`echo $LINUX_COMPILE_BY | $UTS_TRUNCATE`\"
+    echo \#define LINUX_COMPILE_HOST \"`echo $LINUX_COMPILE_HOST | $UTS_TRUNCATE`\"
+    echo \#define LINUX_COMPILE_ID \" \(\" LINUX_COMPILE_BY \"@\" LINUX_COMPILE_HOST \"\)\"
+  fi
 
   echo \#define LINUX_COMPILER \"`$CC -v 2>&1 | tail -n 1`\"
 ) > .tmpcompile
--- a/Makefile
+++ b/Makefile
@@ -976,7 +976,7 @@ endif
 prepare2: prepare3 outputmakefile asm-generic
 
 prepare1: prepare2 include/linux/version.h include/generated/utsrelease.h \
-                   include/config/auto.conf
+                   include/config/auto.conf include/generated/package.h
 	$(cmd_crmodverdir)
 
 archprepare: archscripts prepare1 scripts_basic
@@ -1008,12 +1008,36 @@ define filechk_version.h
 	echo '#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))';)
 endef
 
+DISTRIBUTION := $(shell lsb_release -is 2>/dev/null)
+ifeq ($(DISTRIBUTION),)
+DISTRIBUTION := Debian
+endif
+
+ifneq ($(DISTRIBUTION_OFFICIAL_BUILD),)
+define filechk_package.h
+	echo \#define LINUX_PACKAGE_ID \" \($(DISTRIBUTION) $(DISTRIBUTION_VERSION)\)\"
+endef
+else
+ifneq ($(wildcard version.$(DISTRIBUTION)),)
+define filechk_package.h
+	echo \#define LINUX_PACKAGE_ID \" \($$(cut -d" " -f1 version.$(DISTRIBUTION))\)\"
+endef
+else
+define filechk_package.h
+	echo \#define LINUX_PACKAGE_ID \" \(unknown\)\"
+endef
+endif
+endif
+
 include/linux/version.h: $(srctree)/Makefile FORCE
 	$(call filechk,version.h)
 
 include/generated/utsrelease.h: include/config/kernel.release FORCE
 	$(call filechk,utsrelease.h)
 
+include/generated/package.h: $(srctree)/Makefile FORCE
+	$(call filechk,package.h)
+
 PHONY += headerdep
 headerdep:
 	$(Q)find $(srctree)/include/ -name '*.h' | xargs --max-args 1 \
