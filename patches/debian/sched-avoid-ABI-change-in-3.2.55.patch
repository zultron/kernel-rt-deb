From: Ben Hutchings <ben@decadent.org.uk>
Date: Sat, 08 Mar 2014 19:06:30 +0000
Subject: sched: Avoid ABI change in 3.2.55
Forwarded: not-needed

Commit 57d2aa00dcec67afa52478730f2b524521af14fb
("sched/rt: Avoid updating RT entry timeout twice within one tick period"),
backported into 3.2.55, added a watchdog_stamp field in the middle
of struct sched_rt_entity and hence in struct task_struct.  Move
it to the end of task_struct and hide it from genksyms.


--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1200,7 +1200,6 @@ struct sched_entity {
 struct sched_rt_entity {
 	struct list_head run_list;
 	unsigned long timeout;
-	unsigned long watchdog_stamp;
 	unsigned int time_slice;
 	int nr_cpus_allowed;
 
@@ -1581,6 +1580,9 @@ struct task_struct {
 #ifdef CONFIG_HAVE_HW_BREAKPOINT
 	atomic_t ptrace_bp_refcnt;
 #endif
+#ifndef __GENKSYMS__
+	unsigned long rt_watchdog_stamp;
+#endif
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
--- a/kernel/sched_rt.c
+++ b/kernel/sched_rt.c
@@ -1777,9 +1777,9 @@ static void watchdog(struct rq *rq, stru
 	if (soft != RLIM_INFINITY) {
 		unsigned long next;
 
-		if (p->rt.watchdog_stamp != jiffies) {
+		if (p->rt_watchdog_stamp != jiffies) {
 			p->rt.timeout++;
-			p->rt.watchdog_stamp = jiffies;
+			p->rt_watchdog_stamp = jiffies;
 		}
 
 		next = DIV_ROUND_UP(min(soft, hard), USEC_PER_SEC/HZ);
