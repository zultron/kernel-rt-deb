From: "J. R. Okajima" <hooanon05@yahoo.co.jp>
Date: Tue, 30 Apr 2013 03:32:26 +0900
Subject: [36/83] aufs: plink hlist 5/5, implement /debug/aufs/si_<id>/plink
Origin: http://sourceforge.net/p/aufs/aufs3-standalone/ci/c8d5cfdb7df6dfe6bfc23f26881c319f580e7ef1

In order to see the status of the plink hlist, implement
/debug/aufs/si_<id>/plink. For the format, see
Documentation/ABI/testing/debugfs-aufs.

This commit is a part of 'plink hlist' series which converts a simple
linked list intoa hashed array. See other commits too.

Signed-off-by: J. R. Okajima <hooanon05@yahoo.co.jp>
---
 Documentation/ABI/testing/debugfs-aufs |  13 +++++
 fs/aufs/dbgaufs.c                      | 101 +++++++++++++++++++++++++++++++++
 fs/aufs/plink.c                        |   8 ---
 fs/aufs/super.h                        |  13 ++++-
 4 files changed, 126 insertions(+), 9 deletions(-)

--- a/Documentation/ABI/testing/debugfs-aufs
+++ b/Documentation/ABI/testing/debugfs-aufs
@@ -6,6 +6,19 @@ Description:
 		per aufs mount, where <id> is a unique id generated
 		internally.
 
+What:		/debug/aufs/si_<id>/plink
+Date:		Apr 2013
+Contact:	J. R. Okajima <hooanon05@yahoo.co.jp>
+Description:
+		It has three lines and shows the information about the
+		pseudo-link. The first line is a single number
+		representing a number of buckets. The second line is a
+		number of pseudo-links per buckets (separated by a
+		blank). The last line is a single number representing a
+		total number of psedo-links.
+		When the aufs mount option 'noplink' is specified, it
+		will show "1\n0\n0\n".
+
 What:		/debug/aufs/si_<id>/xib
 Date:		March 2009
 Contact:	J. R. Okajima <hooanon05@yahoo.co.jp>
--- a/fs/aufs/dbgaufs.c
+++ b/fs/aufs/dbgaufs.c
@@ -96,6 +96,101 @@ static ssize_t dbgaufs_xi_read(struct fi
 
 /* ---------------------------------------------------------------------- */
 
+struct dbgaufs_plink_arg {
+	int n;
+	char a[];
+};
+
+static int dbgaufs_plink_release(struct inode *inode __maybe_unused,
+				 struct file *file)
+{
+	free_page((unsigned long)file->private_data);
+	return 0;
+}
+
+static int dbgaufs_plink_open(struct inode *inode, struct file *file)
+{
+	int err, i, limit;
+	unsigned long n, sum;
+	struct dbgaufs_plink_arg *p;
+	struct au_sbinfo *sbinfo;
+	struct super_block *sb;
+	struct au_sphlhead *sphl;
+
+	err = -ENOMEM;
+	p = (void *)get_zeroed_page(GFP_NOFS);
+	if (unlikely(!p))
+		goto out;
+
+	err = -EFBIG;
+	sbinfo = inode->i_private;
+	sb = sbinfo->si_sb;
+	si_noflush_read_lock(sb);
+	if (au_opt_test(au_mntflags(sb), PLINK)) {
+		limit = PAGE_SIZE - sizeof(p->n);
+
+		/* the number of buckets */
+		n = snprintf(p->a + p->n, limit, "%d\n", AuPlink_NHASH);
+		p->n += n;
+		limit -= n;
+
+		sum = 0;
+		for (i = 0, sphl = sbinfo->si_plink;
+		     i < AuPlink_NHASH;
+		     i++, sphl++) {
+			n = au_sphl_count(sphl);
+			sum += n;
+
+			n = snprintf(p->a + p->n, limit, "%lu ", n);
+			p->n += n;
+			limit -= n;
+			if (unlikely(limit <= 0))
+				goto out_free;
+		}
+		p->a[p->n - 1] = '\n';
+
+		/* the sum of plinks */
+		n = snprintf(p->a + p->n, limit, "%lu\n", sum);
+		p->n += n;
+		limit -= n;
+		if (unlikely(limit <= 0))
+			goto out_free;
+	} else {
+#define str "1\n0\n0\n"
+		p->n = sizeof(str) - 1;
+		strcpy(p->a, str);
+#undef str
+	}
+	si_read_unlock(sb);
+
+	err = 0;
+	file->private_data = p;
+	goto out; /* success */
+
+out_free:
+	free_page((unsigned long)p);
+out:
+	return err;
+}
+
+static ssize_t dbgaufs_plink_read(struct file *file, char __user *buf,
+				  size_t count, loff_t *ppos)
+{
+	struct dbgaufs_plink_arg *p;
+
+	p = file->private_data;
+	return simple_read_from_buffer(buf, count, ppos, p->a, p->n);
+}
+
+static const struct file_operations dbgaufs_plink_fop = {
+	.owner		= THIS_MODULE,
+	.open		= dbgaufs_plink_open,
+	.release	= dbgaufs_plink_release,
+	.read		= dbgaufs_plink_read
+};
+
+/* ---------------------------------------------------------------------- */
+
 static int dbgaufs_xib_open(struct inode *inode, struct file *file)
 {
 	int err;
@@ -305,6 +400,12 @@ int dbgaufs_si_init(struct au_sbinfo *sb
 	if (unlikely(!sbinfo->si_dbgaufs_xib))
 		goto out_dir;
 
+	sbinfo->si_dbgaufs_plink = debugfs_create_file
+		("plink", dbgaufs_mode, sbinfo->si_dbgaufs, sbinfo,
+		 &dbgaufs_plink_fop);
+	if (unlikely(!sbinfo->si_dbgaufs_plink))
+		goto out_dir;
+
 	err = dbgaufs_xigen_init(sbinfo);
 	if (!err)
 		goto out; /* success */
--- a/fs/aufs/plink.c
+++ b/fs/aufs/plink.c
@@ -119,14 +119,6 @@ int au_plink_maint_enter(struct super_bl
 
 /* ---------------------------------------------------------------------- */
 
-struct pseudo_link {
-	union {
-		struct hlist_node hlist;
-		struct rcu_head rcu;
-	};
-	struct inode *inode;
-};
-
 #ifdef CONFIG_AUFS_DEBUG
 void au_plink_list(struct super_block *sb)
 {
--- a/fs/aufs/super.h
+++ b/fs/aufs/super.h
@@ -55,6 +55,14 @@ struct au_wbr_mfs {
 	unsigned long long	mfsrr_watermark;
 };
 
+struct pseudo_link {
+	union {
+		struct hlist_node hlist;
+		struct rcu_head rcu;
+	};
+	struct inode *inode;
+};
+
 #define AuPlink_NHASH 100
 static inline int au_plink_hash(ino_t ino)
 {
@@ -164,7 +172,9 @@ struct au_sbinfo {
 	 */
 	struct kobject		si_kobj;
 #ifdef CONFIG_DEBUG_FS
-	struct dentry		 *si_dbgaufs, *si_dbgaufs_xib;
+	struct dentry		 *si_dbgaufs;
+	struct dentry		 *si_dbgaufs_plink;
+	struct dentry		 *si_dbgaufs_xib;
 #ifdef CONFIG_AUFS_EXPORT
 	struct dentry		 *si_dbgaufs_xigen;
 #endif
@@ -363,6 +373,7 @@ static inline void dbgaufs_si_null(struc
 	/* AuRwMustWriteLock(&sbinfo->si_rwsem); */
 #ifdef CONFIG_DEBUG_FS
 	sbinfo->si_dbgaufs = NULL;
+	sbinfo->si_dbgaufs_plink = NULL;
 	sbinfo->si_dbgaufs_xib = NULL;
 #ifdef CONFIG_AUFS_EXPORT
 	sbinfo->si_dbgaufs_xigen = NULL;
