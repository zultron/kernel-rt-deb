From f9138eda65cbe5822ac77070a63dcc729611081b Mon Sep 17 00:00:00 2001
From: Steven Rostedt <rostedt@goodmis.org>
Date: Thu, 2 Aug 2012 18:56:52 -0400
Subject: [PATCH 276/278] time/rt: Fix up leap-second backport for RT changes

The leap-second backport broke RT, and a few changes had to be done.

1) The second_overflow now encompasses ntp_leap_second, and since
second_overflow is called with the xtime_lock held, we can not take that
lock either.

2) Change ktime_get_update_offsets() to use read_seqcount_begin() instead
of read_seq_begin() (and retry).

Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
---
 kernel/time/ntp.c         |    6 ------
 kernel/time/timekeeping.c |    4 ++--
 2 files changed, 2 insertions(+), 8 deletions(-)
 [dannf: adjusted to apply to Debian's 3.2.30]

diff -urpN a/kernel/time/ntp.c b/kernel/time/ntp.c
--- a/kernel/time/ntp.c	2012-09-24 07:30:56.000000000 -0600
+++ b/kernel/time/ntp.c	2012-09-24 07:32:24.367015862 -0600
@@ -362,9 +362,6 @@ int second_overflow(unsigned long secs)
 	int leap = 0;
 	s64 delta;
 
-	raw_spin_lock(&xtime_lock);
-	write_seqcount_begin(&xtime_seq);
-
 	/*
 	 * Leap second processing. If in leap-insert state at the end of the
 	 * day, the system clock is set back one second; if in leap-delete
@@ -406,8 +403,6 @@ int second_overflow(unsigned long secs)
 	}
 
 
-	write_seqcount_end(&xtime_seq);
-	raw_spin_unlock(&xtime_lock);
 	/* Bump the maxerror field */
 	time_maxerror += MAXFREQ / NSEC_PER_USEC;
 	if (time_maxerror > NTP_PHASE_LIMIT) {
diff -urpN a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
--- a/kernel/time/timekeeping.c	2012-09-24 07:30:56.000000000 -0600
+++ b/kernel/time/timekeeping.c	2012-09-24 07:31:39.035015329 -0600
@@ -1295,7 +1295,7 @@ ktime_t ktime_get_update_offsets(ktime_t
 	u64 secs, nsecs;
 
 	do {
-		seq = read_seqbegin(&xtime_lock);
+		seq = read_seqcount_begin(&xtime_seq);
 
 		secs = xtime.tv_sec;
 		nsecs = xtime.tv_nsec;
@@ -1305,7 +1305,7 @@ ktime_t ktime_get_update_offsets(ktime_t
 
 		*real = offs_real;
 		*boot = offs_boot;
-	} while (read_seqretry(&xtime_lock, seq));
+	} while (read_seqcount_retry(&xtime_seq, seq));
 
 	now = ktime_add_ns(ktime_set(secs, 0), nsecs);
 	now = ktime_sub(now, *real);
