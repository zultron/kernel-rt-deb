From: Thomas Gleixner <tglx@linutronix.de>
Date: Tue, 6 Apr 2010 16:51:31 +0200
Subject: [PATCH 190/338] md: raid5: Make raid5_percpu handling RT aware
Origin: https://git.kernel.org/cgit/linux/kernel/git/rt/linux-stable-rt.git/commit?id=ed451a3f37cf45ee2f85a5294810e2ffdea8815d

__raid_run_ops() disables preemption with get_cpu() around the access
to the raid5_percpu variables. That causes scheduling while atomic
spews on RT.

Serialize the access to the percpu data with a lock and keep the code
preemptible.

Reported-by: Udo van den Heuvel <udovdh@xs4all.nl>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Tested-by: Udo van den Heuvel <udovdh@xs4all.nl>
[bwh: Commit 789b5e031528 ('md/raid5: Fix CPU hotplug callback registration')
 fixed in initialisation of the percpu buffers between the hotplug callback
 and device setup.  That conflicts with this, and reveals that this fix
 doesn't initialise the spinlock at all in the hotplug callback!  As there
 is no good way to tell whether a spinlock has been initialised, and no
 allocation is needed, initialise it for all possible CPUs immediately.]
---
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -1253,8 +1253,9 @@ static void __raid_run_ops(struct stripe
 	struct raid5_percpu *percpu;
 	unsigned long cpu;
 
-	cpu = get_cpu();
+	cpu = get_cpu_light();
 	percpu = per_cpu_ptr(conf->percpu, cpu);
+	spin_lock(&percpu->lock);
 	if (test_bit(STRIPE_OP_BIOFILL, &ops_request)) {
 		ops_run_biofill(sh);
 		overlap_clear++;
@@ -1306,7 +1307,8 @@ static void __raid_run_ops(struct stripe
 			if (test_and_clear_bit(R5_Overlap, &dev->flags))
 				wake_up(&sh->raid_conf->wait_for_overlap);
 		}
-	put_cpu();
+	spin_unlock(&percpu->lock);
+	put_cpu_light();
 }
 
 #ifdef CONFIG_MULTICORE_RAID456
@@ -4538,6 +4540,9 @@ static int raid5_alloc_percpu(struct r5c
 	if (!conf->percpu)
 		return -ENOMEM;
 
+	for_each_possible_cpu(cpu)
+		spin_lock_init(&per_cpu_ptr(conf->percpu, cpu)->lock);
+
 #ifdef CONFIG_HOTPLUG_CPU
 	conf->cpu_notify.notifier_call = raid456_cpu_notify;
 	conf->cpu_notify.priority = 0;
--- a/drivers/md/raid5.h
+++ b/drivers/md/raid5.h
@@ -405,6 +405,7 @@ struct r5conf {
 	int			recovery_disabled;
 	/* per cpu variables */
 	struct raid5_percpu {
+		spinlock_t	lock;	     /* Protection for -RT */
 		struct page	*spare_page; /* Used when checking P/Q in raid6 */
 		void		*scribble;   /* space for constructing buffer
 					      * lists and performing address
